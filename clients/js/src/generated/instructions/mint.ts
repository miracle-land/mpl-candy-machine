/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  findCollectionAuthorityRecordPda,
  findMasterEditionPda,
  findMetadataPda,
} from '@metaplex-foundation/mpl-token-metadata';
import {
  AccountMeta,
  Context,
  Option,
  PublicKey,
  Serializer,
  Signer,
  TransactionBuilder,
  mapSerializer,
  publicKey,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import { findCandyGuardPda, findCandyMachineAuthorityPda } from '../../hooked';
import { addObjectProperty, isWritable } from '../shared';

// Accounts.
export type MintInstructionAccounts = {
  candyGuard?: PublicKey;
  candyMachineProgram?: PublicKey;
  candyMachine: PublicKey;
  candyMachineAuthorityPda?: PublicKey;
  payer?: Signer;
  nftMetadata?: PublicKey;
  nftMint: PublicKey;
  nftMintAuthority?: Signer;
  nftMasterEdition?: PublicKey;
  collectionAuthorityRecord?: PublicKey;
  collectionMint: PublicKey;
  collectionMetadata?: PublicKey;
  collectionMasterEdition?: PublicKey;
  collectionUpdateAuthority: PublicKey;
  tokenMetadataProgram?: PublicKey;
  tokenProgram?: PublicKey;
  systemProgram?: PublicKey;
  recentSlothashes?: PublicKey;
  instructionSysvarAccount?: PublicKey;
};

// Data.
export type MintInstructionData = {
  discriminator: Array<number>;
  mintArgs: Uint8Array;
  group: Option<string>;
};

export type MintInstructionDataArgs = {
  mintArgs: Uint8Array;
  group: Option<string>;
};

export function getMintInstructionDataSerializer(
  context: Pick<Context, 'serializer'>
): Serializer<MintInstructionDataArgs, MintInstructionData> {
  const s = context.serializer;
  return mapSerializer<MintInstructionDataArgs, any, MintInstructionData>(
    s.struct<MintInstructionData>(
      [
        ['discriminator', s.array(s.u8(), { size: 8 })],
        ['mintArgs', s.bytes()],
        ['group', s.option(s.string())],
      ],
      { description: 'MintInstructionData' }
    ),
    (value) => ({
      ...value,
      discriminator: [51, 57, 225, 47, 182, 146, 137, 166],
    })
  ) as Serializer<MintInstructionDataArgs, MintInstructionData>;
}

// Args.
export type MintInstructionArgs = MintInstructionDataArgs;

// Instruction.
export function mint(
  context: Pick<
    Context,
    'serializer' | 'programs' | 'eddsa' | 'identity' | 'payer'
  >,
  input: MintInstructionAccounts & MintInstructionArgs
): TransactionBuilder {
  const signers: Signer[] = [];
  const keys: AccountMeta[] = [];

  // Program ID.
  const programId = {
    ...context.programs.getPublicKey(
      'mplCandyGuard',
      'CguarSUzT8jJEudNF9adPGeQnwcaf7i5CgFWdRbLEvfN'
    ),
    isWritable: false,
  };

  // Resolved inputs.
  const resolvingAccounts = {};
  const resolvingArgs = {};
  addObjectProperty(
    resolvingAccounts,
    'candyGuard',
    input.candyGuard ??
      findCandyGuardPda(context, { base: publicKey(input.candyMachine) })
  );
  addObjectProperty(
    resolvingAccounts,
    'candyMachineProgram',
    input.candyMachineProgram ?? {
      ...context.programs.getPublicKey(
        'mplCandyMachine',
        'CMv3YQQ7nbhFUjArAcGuRcDa6avoYN1a72HRZMvJ6WnU'
      ),
      isWritable: false,
    }
  );
  addObjectProperty(
    resolvingAccounts,
    'candyMachineAuthorityPda',
    input.candyMachineAuthorityPda ??
      findCandyMachineAuthorityPda(context, {
        candyMachine: publicKey(input.candyMachine),
      })
  );
  addObjectProperty(resolvingAccounts, 'payer', input.payer ?? context.payer);
  addObjectProperty(
    resolvingAccounts,
    'nftMetadata',
    input.nftMetadata ??
      findMetadataPda(context, { mint: publicKey(input.nftMint) })
  );
  addObjectProperty(
    resolvingAccounts,
    'nftMintAuthority',
    input.nftMintAuthority ?? context.identity
  );
  addObjectProperty(
    resolvingAccounts,
    'nftMasterEdition',
    input.nftMasterEdition ??
      findMasterEditionPda(context, { mint: publicKey(input.nftMint) })
  );
  addObjectProperty(
    resolvingAccounts,
    'collectionAuthorityRecord',
    input.collectionAuthorityRecord ??
      findCollectionAuthorityRecordPda(context, {
        mint: publicKey(input.collectionMint),
        collectionAuthority: publicKey(
          resolvingAccounts.candyMachineAuthorityPda
        ),
      })
  );
  addObjectProperty(
    resolvingAccounts,
    'collectionMetadata',
    input.collectionMetadata ??
      findMetadataPda(context, { mint: publicKey(input.collectionMint) })
  );
  addObjectProperty(
    resolvingAccounts,
    'collectionMasterEdition',
    input.collectionMasterEdition ??
      findMasterEditionPda(context, { mint: publicKey(input.collectionMint) })
  );
  addObjectProperty(
    resolvingAccounts,
    'tokenMetadataProgram',
    input.tokenMetadataProgram ?? {
      ...context.programs.getPublicKey(
        'mplTokenMetadata',
        'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'
      ),
      isWritable: false,
    }
  );
  addObjectProperty(
    resolvingAccounts,
    'tokenProgram',
    input.tokenProgram ?? {
      ...context.programs.getPublicKey(
        'splToken',
        'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'
      ),
      isWritable: false,
    }
  );
  addObjectProperty(
    resolvingAccounts,
    'systemProgram',
    input.systemProgram ?? {
      ...context.programs.getPublicKey(
        'splSystem',
        '11111111111111111111111111111111'
      ),
      isWritable: false,
    }
  );
  addObjectProperty(
    resolvingAccounts,
    'recentSlothashes',
    input.recentSlothashes ??
      publicKey('SysvarS1otHashes111111111111111111111111111')
  );
  addObjectProperty(
    resolvingAccounts,
    'instructionSysvarAccount',
    input.instructionSysvarAccount ??
      publicKey('Sysvar1nstructions1111111111111111111111111')
  );
  const resolvedAccounts = { ...input, ...resolvingAccounts };
  const resolvedArgs = { ...input, ...resolvingArgs };

  // Candy Guard.
  keys.push({
    pubkey: resolvedAccounts.candyGuard,
    isSigner: false,
    isWritable: isWritable(resolvedAccounts.candyGuard, false),
  });

  // Candy Machine Program.
  keys.push({
    pubkey: resolvedAccounts.candyMachineProgram,
    isSigner: false,
    isWritable: isWritable(resolvedAccounts.candyMachineProgram, false),
  });

  // Candy Machine.
  keys.push({
    pubkey: resolvedAccounts.candyMachine,
    isSigner: false,
    isWritable: isWritable(resolvedAccounts.candyMachine, true),
  });

  // Candy Machine Authority Pda.
  keys.push({
    pubkey: resolvedAccounts.candyMachineAuthorityPda,
    isSigner: false,
    isWritable: isWritable(resolvedAccounts.candyMachineAuthorityPda, true),
  });

  // Payer.
  signers.push(resolvedAccounts.payer);
  keys.push({
    pubkey: resolvedAccounts.payer.publicKey,
    isSigner: true,
    isWritable: isWritable(resolvedAccounts.payer, true),
  });

  // Nft Metadata.
  keys.push({
    pubkey: resolvedAccounts.nftMetadata,
    isSigner: false,
    isWritable: isWritable(resolvedAccounts.nftMetadata, true),
  });

  // Nft Mint.
  keys.push({
    pubkey: resolvedAccounts.nftMint,
    isSigner: false,
    isWritable: isWritable(resolvedAccounts.nftMint, true),
  });

  // Nft Mint Authority.
  signers.push(resolvedAccounts.nftMintAuthority);
  keys.push({
    pubkey: resolvedAccounts.nftMintAuthority.publicKey,
    isSigner: true,
    isWritable: isWritable(resolvedAccounts.nftMintAuthority, false),
  });

  // Nft Master Edition.
  keys.push({
    pubkey: resolvedAccounts.nftMasterEdition,
    isSigner: false,
    isWritable: isWritable(resolvedAccounts.nftMasterEdition, true),
  });

  // Collection Authority Record.
  keys.push({
    pubkey: resolvedAccounts.collectionAuthorityRecord,
    isSigner: false,
    isWritable: isWritable(resolvedAccounts.collectionAuthorityRecord, false),
  });

  // Collection Mint.
  keys.push({
    pubkey: resolvedAccounts.collectionMint,
    isSigner: false,
    isWritable: isWritable(resolvedAccounts.collectionMint, false),
  });

  // Collection Metadata.
  keys.push({
    pubkey: resolvedAccounts.collectionMetadata,
    isSigner: false,
    isWritable: isWritable(resolvedAccounts.collectionMetadata, true),
  });

  // Collection Master Edition.
  keys.push({
    pubkey: resolvedAccounts.collectionMasterEdition,
    isSigner: false,
    isWritable: isWritable(resolvedAccounts.collectionMasterEdition, false),
  });

  // Collection Update Authority.
  keys.push({
    pubkey: resolvedAccounts.collectionUpdateAuthority,
    isSigner: false,
    isWritable: isWritable(resolvedAccounts.collectionUpdateAuthority, false),
  });

  // Token Metadata Program.
  keys.push({
    pubkey: resolvedAccounts.tokenMetadataProgram,
    isSigner: false,
    isWritable: isWritable(resolvedAccounts.tokenMetadataProgram, false),
  });

  // Token Program.
  keys.push({
    pubkey: resolvedAccounts.tokenProgram,
    isSigner: false,
    isWritable: isWritable(resolvedAccounts.tokenProgram, false),
  });

  // System Program.
  keys.push({
    pubkey: resolvedAccounts.systemProgram,
    isSigner: false,
    isWritable: isWritable(resolvedAccounts.systemProgram, false),
  });

  // Recent Slothashes.
  keys.push({
    pubkey: resolvedAccounts.recentSlothashes,
    isSigner: false,
    isWritable: isWritable(resolvedAccounts.recentSlothashes, false),
  });

  // Instruction Sysvar Account.
  keys.push({
    pubkey: resolvedAccounts.instructionSysvarAccount,
    isSigner: false,
    isWritable: isWritable(resolvedAccounts.instructionSysvarAccount, false),
  });

  // Data.
  const data =
    getMintInstructionDataSerializer(context).serialize(resolvedArgs);

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
