/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  AccountMeta,
  Context,
  Option,
  PublicKey,
  Serializer,
  Signer,
  TransactionBuilder,
  mapSerializer,
  publicKey,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import { findCandyGuardPda } from '../../hooked';
import { addObjectProperty, isWritable } from '../shared';
import { GuardType, GuardTypeArgs, getGuardTypeSerializer } from '../types';

// Accounts.
export type RouteInstructionAccounts = {
  candyGuard?: PublicKey;
  candyMachine: PublicKey;
  payer?: Signer;
};

// Data.
export type RouteInstructionData = {
  discriminator: Array<number>;
  /** The target guard type. */
  guard: GuardType;
  /** Arguments for the guard instruction. */
  data: Uint8Array;
  group: Option<string>;
};

export type RouteInstructionDataArgs = {
  /** The target guard type. */
  guard: GuardTypeArgs;
  /** Arguments for the guard instruction. */
  data: Uint8Array;
  group: Option<string>;
};

export function getRouteInstructionDataSerializer(
  context: Pick<Context, 'serializer'>
): Serializer<RouteInstructionDataArgs, RouteInstructionData> {
  const s = context.serializer;
  return mapSerializer<RouteInstructionDataArgs, any, RouteInstructionData>(
    s.struct<RouteInstructionData>(
      [
        ['discriminator', s.array(s.u8(), { size: 8 })],
        ['guard', getGuardTypeSerializer(context)],
        ['data', s.bytes()],
        ['group', s.option(s.string())],
      ],
      { description: 'RouteInstructionData' }
    ),
    (value) => ({
      ...value,
      discriminator: [229, 23, 203, 151, 122, 227, 173, 42],
    })
  ) as Serializer<RouteInstructionDataArgs, RouteInstructionData>;
}

// Args.
export type RouteInstructionArgs = RouteInstructionDataArgs;

// Instruction.
export function route(
  context: Pick<Context, 'serializer' | 'programs' | 'eddsa' | 'payer'>,
  input: RouteInstructionAccounts & RouteInstructionArgs
): TransactionBuilder {
  const signers: Signer[] = [];
  const keys: AccountMeta[] = [];

  // Program ID.
  const programId = {
    ...context.programs.getPublicKey(
      'mplCandyGuard',
      'cgrdgM8aM2K2vCyKx3XRgF24qfFJnbNsvEa8EmRi4tK'
    ),
    isWritable: false,
  };

  // Resolved inputs.
  const resolvingAccounts = {};
  const resolvingArgs = {};
  addObjectProperty(
    resolvingAccounts,
    'candyGuard',
    input.candyGuard ??
      findCandyGuardPda(context, { base: publicKey(input.candyMachine) })
  );
  addObjectProperty(resolvingAccounts, 'payer', input.payer ?? context.payer);
  const resolvedAccounts = { ...input, ...resolvingAccounts };
  const resolvedArgs = { ...input, ...resolvingArgs };

  // Candy Guard.
  keys.push({
    pubkey: resolvedAccounts.candyGuard,
    isSigner: false,
    isWritable: isWritable(resolvedAccounts.candyGuard, false),
  });

  // Candy Machine.
  keys.push({
    pubkey: resolvedAccounts.candyMachine,
    isSigner: false,
    isWritable: isWritable(resolvedAccounts.candyMachine, true),
  });

  // Payer.
  signers.push(resolvedAccounts.payer);
  keys.push({
    pubkey: resolvedAccounts.payer.publicKey,
    isSigner: true,
    isWritable: isWritable(resolvedAccounts.payer, true),
  });

  // Data.
  const data =
    getRouteInstructionDataSerializer(context).serialize(resolvedArgs);

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
