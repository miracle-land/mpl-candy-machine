/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  AccountMeta,
  Context,
  PublicKey,
  Serializer,
  Signer,
  TransactionBuilder,
  mapSerializer,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import { addObjectProperty, isWritable } from '../shared';

// Accounts.
export type UpdateCandyGuardInstructionAccounts = {
  candyGuard: PublicKey;
  authority?: Signer;
  payer?: Signer;
  systemProgram?: PublicKey;
};

// Data.
export type UpdateCandyGuardInstructionData = {
  discriminator: Array<number>;
  data: Uint8Array;
};

export type UpdateCandyGuardInstructionDataArgs = { data: Uint8Array };

export function getUpdateCandyGuardInstructionDataSerializer(
  context: Pick<Context, 'serializer'>
): Serializer<
  UpdateCandyGuardInstructionDataArgs,
  UpdateCandyGuardInstructionData
> {
  const s = context.serializer;
  return mapSerializer<
    UpdateCandyGuardInstructionDataArgs,
    any,
    UpdateCandyGuardInstructionData
  >(
    s.struct<UpdateCandyGuardInstructionData>(
      [
        ['discriminator', s.array(s.u8(), { size: 8 })],
        ['data', s.bytes()],
      ],
      { description: 'UpdateCandyGuardInstructionData' }
    ),
    (value) => ({
      ...value,
      discriminator: [219, 200, 88, 176, 158, 63, 253, 127],
    })
  ) as Serializer<
    UpdateCandyGuardInstructionDataArgs,
    UpdateCandyGuardInstructionData
  >;
}

// Args.
export type UpdateCandyGuardInstructionArgs =
  UpdateCandyGuardInstructionDataArgs;

// Instruction.
export function updateCandyGuard(
  context: Pick<Context, 'serializer' | 'programs' | 'identity' | 'payer'>,
  input: UpdateCandyGuardInstructionAccounts & UpdateCandyGuardInstructionArgs
): TransactionBuilder {
  const signers: Signer[] = [];
  const keys: AccountMeta[] = [];

  // Program ID.
  const programId = {
    ...context.programs.getPublicKey(
      'mplCandyGuard',
      'cgrdgM8aM2K2vCyKx3XRgF24qfFJnbNsvEa8EmRi4tK'
    ),
    isWritable: false,
  };

  // Resolved inputs.
  const resolvingAccounts = {};
  const resolvingArgs = {};
  addObjectProperty(
    resolvingAccounts,
    'authority',
    input.authority ?? context.identity
  );
  addObjectProperty(resolvingAccounts, 'payer', input.payer ?? context.payer);
  addObjectProperty(
    resolvingAccounts,
    'systemProgram',
    input.systemProgram ?? {
      ...context.programs.getPublicKey(
        'splSystem',
        '11111111111111111111111111111111'
      ),
      isWritable: false,
    }
  );
  const resolvedAccounts = { ...input, ...resolvingAccounts };
  const resolvedArgs = { ...input, ...resolvingArgs };

  // Candy Guard.
  keys.push({
    pubkey: resolvedAccounts.candyGuard,
    isSigner: false,
    isWritable: isWritable(resolvedAccounts.candyGuard, true),
  });

  // Authority.
  signers.push(resolvedAccounts.authority);
  keys.push({
    pubkey: resolvedAccounts.authority.publicKey,
    isSigner: true,
    isWritable: isWritable(resolvedAccounts.authority, false),
  });

  // Payer.
  signers.push(resolvedAccounts.payer);
  keys.push({
    pubkey: resolvedAccounts.payer.publicKey,
    isSigner: true,
    isWritable: isWritable(resolvedAccounts.payer, false),
  });

  // System Program.
  keys.push({
    pubkey: resolvedAccounts.systemProgram,
    isSigner: false,
    isWritable: isWritable(resolvedAccounts.systemProgram, false),
  });

  // Data.
  const data =
    getUpdateCandyGuardInstructionDataSerializer(context).serialize(
      resolvedArgs
    );

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
