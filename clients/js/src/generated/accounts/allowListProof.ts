/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Account,
  Context,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  Serializer,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
} from '@metaplex-foundation/umi';

/** PDA to track whether an address has been validated or not. */
export type AllowListProof = Account<AllowListProofAccountData>;

export type AllowListProofAccountData = { timestamp: bigint };

export type AllowListProofAccountDataArgs = { timestamp: number | bigint };

export function getAllowListProofAccountDataSerializer(
  context: Pick<Context, 'serializer'>
): Serializer<AllowListProofAccountDataArgs, AllowListProofAccountData> {
  const s = context.serializer;
  return s.struct<AllowListProofAccountData>([['timestamp', s.i64()]], {
    description: 'AllowListProofAccountData',
  }) as Serializer<AllowListProofAccountDataArgs, AllowListProofAccountData>;
}

export function deserializeAllowListProof(
  context: Pick<Context, 'serializer'>,
  rawAccount: RpcAccount
): AllowListProof {
  return deserializeAccount(
    rawAccount,
    getAllowListProofAccountDataSerializer(context)
  );
}

export async function fetchAllowListProof(
  context: Pick<Context, 'rpc' | 'serializer'>,
  publicKey: PublicKey,
  options?: RpcGetAccountOptions
): Promise<AllowListProof> {
  const maybeAccount = await context.rpc.getAccount(publicKey, options);
  assertAccountExists(maybeAccount, 'AllowListProof');
  return deserializeAllowListProof(context, maybeAccount);
}

export async function safeFetchAllowListProof(
  context: Pick<Context, 'rpc' | 'serializer'>,
  publicKey: PublicKey,
  options?: RpcGetAccountOptions
): Promise<AllowListProof | null> {
  const maybeAccount = await context.rpc.getAccount(publicKey, options);
  return maybeAccount.exists
    ? deserializeAllowListProof(context, maybeAccount)
    : null;
}

export async function fetchAllAllowListProof(
  context: Pick<Context, 'rpc' | 'serializer'>,
  publicKeys: PublicKey[],
  options?: RpcGetAccountsOptions
): Promise<AllowListProof[]> {
  const maybeAccounts = await context.rpc.getAccounts(publicKeys, options);
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'AllowListProof');
    return deserializeAllowListProof(context, maybeAccount);
  });
}

export async function safeFetchAllAllowListProof(
  context: Pick<Context, 'rpc' | 'serializer'>,
  publicKeys: PublicKey[],
  options?: RpcGetAccountsOptions
): Promise<AllowListProof[]> {
  const maybeAccounts = await context.rpc.getAccounts(publicKeys, options);
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) =>
      deserializeAllowListProof(context, maybeAccount as RpcAccount)
    );
}

export function getAllowListProofGpaBuilder(
  context: Pick<Context, 'rpc' | 'serializer' | 'programs'>
) {
  const s = context.serializer;
  const programId = context.programs.getPublicKey(
    'mplCandyGuard',
    'CguarSUzT8jJEudNF9adPGeQnwcaf7i5CgFWdRbLEvfN'
  );
  return gpaBuilder(context, programId)
    .registerFields<{ timestamp: number | bigint }>({ timestamp: [0, s.i64()] })
    .deserializeUsing<AllowListProof>((account) =>
      deserializeAllowListProof(context, account)
    )
    .whereSize(4);
}

export function getAllowListProofSize(): number {
  return 4;
}

export function findAllowListProofPda(
  context: Pick<Context, 'eddsa' | 'programs' | 'serializer'>,
  seeds: {
    /** The Merkle Root used when verifying the user */
    merkleRoot: Uint8Array;
    /** The address of the wallet trying to mint */
    user: PublicKey;
    /** The address of the Candy Guard account */
    candyGuard: PublicKey;
    /** The address of the Candy Machine account */
    candyMachine: PublicKey;
  }
): Pda {
  const s = context.serializer;
  const programId = context.programs.getPublicKey(
    'mplCandyGuard',
    'CguarSUzT8jJEudNF9adPGeQnwcaf7i5CgFWdRbLEvfN'
  );
  return context.eddsa.findPda(programId, [
    s.string({ size: 'variable' }).serialize('allow_list'),
    s.bytes({ size: 32 }).serialize(seeds.merkleRoot),
    s.publicKey().serialize(seeds.user),
    s.publicKey().serialize(seeds.candyGuard),
    s.publicKey().serialize(seeds.candyMachine),
  ]);
}

export async function fetchAllowListProofFromSeeds(
  context: Pick<Context, 'eddsa' | 'programs' | 'rpc' | 'serializer'>,
  seeds: Parameters<typeof findAllowListProofPda>[1],
  options?: RpcGetAccountOptions
): Promise<AllowListProof> {
  return fetchAllowListProof(
    context,
    findAllowListProofPda(context, seeds),
    options
  );
}

export async function safeFetchAllowListProofFromSeeds(
  context: Pick<Context, 'eddsa' | 'programs' | 'rpc' | 'serializer'>,
  seeds: Parameters<typeof findAllowListProofPda>[1],
  options?: RpcGetAccountOptions
): Promise<AllowListProof | null> {
  return safeFetchAllowListProof(
    context,
    findAllowListProofPda(context, seeds),
    options
  );
}
